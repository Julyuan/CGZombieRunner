
//unsigned int VBO, VAO;
//glGenVertexArrays(1, &VAO);
//glGenBuffers(1, &VBO);
// bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
//glBindVertexArray(VAO);

//unsigned int EBO;
//glGenBuffers(1,&EBO);


//glBindBuffer(GL_ARRAY_BUFFER, VBO);
//glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

//glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,EBO);
//glBufferData(GL_ELEMENT_ARRAY_BUFFER,sizeof(indices),indices,GL_STATIC_DRAW);

//glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
//glEnableVertexAttribArray(0);

//glVertexAttribPointer(1,3,GL_FLOAT,GL_FALSE,5*sizeof(float),(void*)(3*sizeof(float)));
//glEnableVertexAttribArray(1);

//glVertexAttribPointer(1,2,GL_FLOAT,GL_FALSE,5*sizeof(float),(void*)(3*sizeof(float)));
//glEnableVertexAttribArray(1);

void translateAndRotate(const Shader & shader){

    glm::vec3 cubePositions[] = {
            glm::vec3( 0.0f,  0.0f,  0.0f),
            glm::vec3( 2.0f,  5.0f, -15.0f),
            glm::vec3(-1.5f, -2.2f, -2.5f),
            glm::vec3(-3.8f, -2.0f, -12.3f),
            glm::vec3( 2.4f, -0.4f, -3.5f),
            glm::vec3(-1.7f,  3.0f, -7.5f),
            glm::vec3( 1.3f, -2.0f, -2.5f),
            glm::vec3( 1.5f,  2.0f, -2.5f),
            glm::vec3( 1.5f,  0.2f, -1.5f),
            glm::vec3(-1.3f,  1.0f, -1.5f)
    };
    //glm::vec4 vec(1.0f,0.0f,0.0f,1.0f);

    float radius = 10.0f;
    float camX = sin(glfwGetTime()) * radius;
    float camZ = cos(glfwGetTime()) * radius;
    glm::mat4 view;
    view = glm::lookAt(cameraPos, glm::vec3(0.0, 0.0, 0.0), cameraUp);
    //view = glm::translate(view, glm::vec3(0.0f, 0.0f, -3.0f));
    glm::mat4 projection(1.0f);
    projection = glm::perspective(glm::radians(45.0f),(float)SCR_WIDTH/SCR_HEIGHT,0.1f,100.0f);
    GLint projectionLoc = glGetUniformLocation(shader.ID,"projection");
    glUniformMatrix4fv(projectionLoc,1,GL_FALSE,glm::value_ptr(projection));

    GLint viewLoc = glGetUniformLocation(shader.ID,"view");
    glUniformMatrix4fv(viewLoc,1,GL_FALSE,glm::value_ptr(view));

    for(int i=0;i<sizeof(cubePositions) / sizeof(glm::vec3);i++){
        glm::mat4 model(1.0f);
        model = glm::translate(model,cubePositions[i]);
        float angle= 20*(i+1);
        model=glm::rotate(model,(float)glfwGetTime() *glm::radians(angle),glm::vec3(0.5f,1.0f,0.0f));
        GLint modelLoc = glGetUniformLocation(shader.ID,"model");
        glUniformMatrix4fv(modelLoc,1,GL_FALSE,glm::value_ptr(model));
        glDrawArrays(GL_TRIANGLES,0,36);
    }

//    trans = glm::translate(trans,glm::vec3(0.3f,0.3f,0.0f));
//    trans = glm::rotate(trans,glm::radians(90.0f),glm::vec3(0.0,0.0,1.0));
//    trans = glm::scale(trans,glm::vec3(0.5,0.5,0.5));
    //vec = model * vec;

}




//void build_house(vec4 position)
//{
//    fcolor = gs_in[0].color;
//    gl_Position = position + vec4(-0.2, -0.2, 0.0, 0.0);    // 1:bottom-left
//    EmitVertex();
//    gl_Position = position + vec4( 0.2, -0.2, 0.0, 0.0);    // 2:bottom-right
//    EmitVertex();
//    gl_Position = position + vec4(-0.2,  0.2, 0.0, 0.0);    // 3:top-left
//    EmitVertex();
//    gl_Position = position + vec4( 0.2,  0.2, 0.0, 0.0);    // 4:top-right
//    EmitVertex();
//    gl_Position = position + vec4( 0.0,  0.4, 0.0, 0.0);    // 5:top
//    fcolor = vec3(1.0, 1.0, 1.0);
//    EmitVertex();
//    EndPrimitive();
//}